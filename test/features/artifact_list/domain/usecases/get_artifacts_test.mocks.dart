// // Mocks generated by Mockito 5.2.0 from annotations
// // in ah_test/test/features/artifact_list/domain/usecases/get_artifacts_test.dart.
// // Do not manually edit this file.

// import 'dart:async' as _i4;

// import 'package:ah_test/core/error/failures.dart' as _i5;
// import 'package:ah_test/features/artifact_list/domain/entities/artifact_entity.dart'
//     as _i6;
// import 'package:ah_test/features/artifact_list/domain/repositories/artifact_repository.dart'
//     as _i3;
// import 'package:dartz/dartz.dart' as _i2;
// import 'package:mockito/mockito.dart' as _i1;

// // ignore_for_file: type=lint
// // ignore_for_file: avoid_redundant_argument_values
// // ignore_for_file: avoid_setters_without_getters
// // ignore_for_file: comment_references
// // ignore_for_file: implementation_imports
// // ignore_for_file: invalid_use_of_visible_for_testing_member
// // ignore_for_file: prefer_const_constructors
// // ignore_for_file: unnecessary_parenthesis
// // ignore_for_file: camel_case_types

// class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

// /// A class which mocks [ArtifactRepository].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockArtifactRepository extends _i1.Mock
//     implements _i3.ArtifactRepository {
//   MockArtifactRepository() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i4.Future<_i2.Either<_i5.Failure, List<_i6.ArtifactEntity>>> getArtifacts(
//           int? page, int? count) =>
//       (super.noSuchMethod(Invocation.method(#getArtifacts, [page, count]),
//               returnValue: Future<
//                       _i2.Either<_i5.Failure, List<_i6.ArtifactEntity>>>.value(
//                   _FakeEither_0<_i5.Failure, List<_i6.ArtifactEntity>>()))
//           as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ArtifactEntity>>>);
// }
